{"version":3,"sources":["components/Header.tsx","components/GameContainer.tsx","components/Hint.tsx","components/Status.tsx","components/ScoreBoardItem.tsx","components/ScoreBoard.tsx","components/Screen.tsx","components/Controls.tsx","lib/queue.ts","lib/get-random-int-inclusive.ts","game/data.ts","lib/constants.ts","game/view.ts","game/controller.ts","components/SnakeGame.tsx","components/App.tsx","components/Root.tsx","index.tsx"],"names":["Header","className","Container","children","Hint","Status","status","ScoreBoardItem","icon","value","ScoreBoard","record","score","Screen","forwardRef","ref","width","height","scaleIndex","style","marginBottom","margin","callbackWithBlurRemoving","callback","e","target","blur","Controls","generateNewGame","pauseGame","continueGame","type","onClick","Queue","items","this","item","push","shift","length","getRandomIntInclusive","a","b","min","Math","ceil","max","floor","random","GameData","columnsAmount","rowsAmount","field","food","snake","direction","generateField","generateFood","setFoodIntoField","generateSnakeCoord","setSnakeIntoField","xNumber","yNumber","x","y","emptyRects","getRandomEmptyPoint","head","forEach","idx","currentX","maxX","currentY","maxY","newHead","getNextHeadPoint","unshift","prevSnakeEnd","pop","cellSize","cellColorDict","empty","snakeHead","snakeBody","GameView","ctx","scaleCanvas","xAmount","yAmount","drawCell","pointType","fillStyle","fillRect","setTransform","scale","GameController","callbacks","data","view","directionsToApply","intervalId","setStatus","drawField","getField","go","onStatusChange","getScore","setInterval","updateField","currentScore","onScoreChange","increaseSpeed","isEmpty","dequeue","updateDirection","gameOver","getSpeed","clearInterval","start","last","enqueue","updateScaleIndex","keyCodeToDirectionMap","arrowsKeyCodes","Object","keys","map","key","Number","gameStatusContorls","canvasSize","SnakeGame","canvasRef","useRef","gameRef","useState","window","devicePixelRatio","setScaleIndex","setScore","localStorage","getItem","setRecord","canvas","current","getContext","getStatus","reset","game","Game","init","pause","continue","useLayoutEffect","mediaQueryList","matchMedia","addEventListener","removeEventListener","addListener","removeListener","useEffect","fixScaleIndexChange","setItem","toString","keyCode","gameStatus","includes","preventDefault","document","body","GameContainer","App","Root","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2ff5cc75.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nconst Header: FC = () => {\n  return (\n    <section className=\"topic\">\n      <h1>Snake Game</h1>\n      <p>Cool retro video game from our childhood</p>\n    </section>\n  );\n};\n\nexport default Header;\n","import React, { FC } from 'react';\n\nconst Container: FC = ({ children }) => {\n  return (\n    <section className=\"nes-container with-title\">\n      <h3 className=\"title\">Let&apos;s play</h3>\n      {children}\n    </section>\n  );\n};\n\nexport default Container;\n","import React, { FC } from 'react';\n\nconst Hint: FC = () => {\n  return <p>Use keyboard arrows to play</p>;\n};\n\nexport default Hint;\n","import React, { FC } from 'react';\nimport { GameStatus } from '../types';\n\ntype StatusProps = {\n  status: GameStatus;\n};\n\nconst Status: FC<StatusProps> = ({ status }) => {\n  return (\n    <div>\n      {status === 'unstarted' && (\n        <span className=\"nes-badge\">\n          <span className=\"is-dark\">Waiting</span>\n        </span>\n      )}\n      {status === 'active' && (\n        <span className=\"nes-badge\">\n          <span className=\"is-primary\">Active</span>\n        </span>\n      )}\n      {status === 'pause' && (\n        <span className=\"nes-badge\">\n          <span className=\"is-warning\">Pause</span>\n        </span>\n      )}\n      {status === 'game over' && (\n        <span className=\"nes-badge\">\n          <span className=\"is-error\">Game Over</span>\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default Status;\n","import React, { FC } from 'react';\n\ntype ScoreBoardItemProps = {\n  icon: string;\n  value: number;\n};\n\nconst ScoreBoardItem: FC<ScoreBoardItemProps> = ({ icon, value }) => {\n  return (\n    <span className=\"scoreboard-item\">\n      <i className={`nes-icon ${icon} is-medium`} />\n      <span className=\"scoreboard-item__value\">{value}</span>\n    </span>\n  );\n};\n\nexport default ScoreBoardItem;\n","import React, { FC } from 'react';\nimport ScoreBoardItem from './ScoreBoardItem';\n\ntype ScoreBoardProps = {\n  record: number;\n  score: number;\n};\n\nconst ScoreBoard: FC<ScoreBoardProps> = ({ record, score }) => {\n  return (\n    <div className=\"scoreboard\">\n      <ScoreBoardItem icon=\"trophy\" value={record} />\n      <ScoreBoardItem icon=\"coin\" value={score} />\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React, { forwardRef } from 'react';\n\ntype ScreenProps = {\n  width: number;\n  height: number;\n  scaleIndex: number;\n};\n\nconst Screen = forwardRef<HTMLCanvasElement, ScreenProps>(\n  ({ width, height, scaleIndex }, ref) => {\n    return (\n      <div\n        className=\"nes-container is-rounded\"\n        style={{ marginBottom: '20px' }}\n      >\n        <canvas\n          ref={ref}\n          width={width * scaleIndex}\n          height={height * scaleIndex}\n          style={{\n            margin: '0 auto',\n            width: `${width}px`,\n            height: `${height}px`,\n          }}\n        />\n      </div>\n    );\n  }\n);\n\nexport default Screen;\n","import React, { FC, MouseEvent } from 'react';\nimport { GameStatus } from '../types';\n\ntype ControlsProps = {\n  status: GameStatus;\n  generateNewGame: () => void;\n  pauseGame: () => void;\n  continueGame: () => void;\n};\n\nconst callbackWithBlurRemoving = (callback: () => void) => {\n  return (e: MouseEvent) => {\n    callback();\n    const target = e.target as HTMLButtonElement;\n    target.blur();\n  };\n};\n\nconst Controls: FC<ControlsProps> = ({\n  status,\n  generateNewGame,\n  pauseGame,\n  continueGame,\n}) => {\n  return (\n    <div className=\"controls-row\">\n      <button\n        type=\"button\"\n        className=\"nes-btn\"\n        onClick={callbackWithBlurRemoving(generateNewGame)}\n      >\n        Play new game\n      </button>\n      {status === 'active' && (\n        <button\n          type=\"button\"\n          className=\"nes-btn is-warning\"\n          onClick={callbackWithBlurRemoving(pauseGame)}\n        >\n          Pause\n        </button>\n      )}\n      {status === 'pause' && (\n        <button\n          type=\"button\"\n          className=\"nes-btn is-primary\"\n          onClick={callbackWithBlurRemoving(continueGame)}\n        >\n          Continue\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","class Queue<T> {\n  private items: T[];\n\n  constructor() {\n    this.items = [];\n  }\n\n  public enqueue(item: T): void {\n    this.items.push(item);\n  }\n\n  public dequeue(): T {\n    return this.items.shift();\n  }\n\n  public isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n\n  get last(): T {\n    return this.items[this.items.length - 1];\n  }\n}\n\nexport default Queue;\n","const getRandomIntInclusive = (a: number, b: number): number => {\n  const min = Math.ceil(a);\n  const max = Math.floor(b);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport default getRandomIntInclusive;\n","import getRandomIntInclusive from '../lib/get-random-int-inclusive';\nimport { Field, Point, Food, Snake, Direction } from '../types';\n\nclass GameData {\n  private field: Field;\n\n  private food: Food;\n\n  private snake: Snake;\n\n  private direction: Direction;\n\n  private score: number;\n\n  constructor(columnsAmount: number, rowsAmount: number) {\n    this.score = 0;\n    this.direction = 'up';\n\n    this.generateField(columnsAmount, rowsAmount);\n\n    this.generateFood();\n    this.setFoodIntoField();\n\n    this.generateSnakeCoord();\n    this.setSnakeIntoField();\n  }\n\n  private generateField(xNumber: number, yNumber: number): void {\n    this.field = [];\n    for (let x = 0; x < xNumber; x++) {\n      for (let y = 0; y < yNumber; y++) {\n        if (!this.field[x]) {\n          this.field[x] = [];\n        }\n        this.field[x][y] = 'empty';\n      }\n    }\n  }\n\n  public updateDirection(direction: Direction): void {\n    if (direction === 'up' && this.direction !== 'down') {\n      this.direction = 'up';\n      return;\n    }\n\n    if (direction === 'right' && this.direction !== 'left') {\n      this.direction = 'right';\n      return;\n    }\n\n    if (direction === 'down' && this.direction !== 'up') {\n      this.direction = 'down';\n      return;\n    }\n\n    if (direction === 'left' && this.direction !== 'right') {\n      this.direction = 'left';\n    }\n  }\n\n  private getRandomEmptyPoint(): Point {\n    const emptyRects = [];\n    for (let x = 0; x < this.field.length; x++) {\n      for (let y = 0; y < this.field[0].length; y++) {\n        if (this.field[x][y] === 'empty') {\n          emptyRects.push({ x, y });\n        }\n      }\n    }\n    return emptyRects[getRandomIntInclusive(0, emptyRects.length - 1)];\n  }\n\n  private generateFood(): void {\n    this.food = this.getRandomEmptyPoint();\n  }\n\n  private generateSnakeCoord(): void {\n    const head = this.getRandomEmptyPoint();\n    this.snake = [head, { ...head, y: head.y + 1 }, { ...head, y: head.y + 2 }];\n  }\n\n  private setFoodIntoField(): void {\n    this.field[this.food.x][this.food.y] = 'food';\n  }\n\n  private setSnakeIntoField(): void {\n    this.snake.forEach(({ x, y }, idx) => {\n      this.field[x][y] = idx === 0 ? 'snakeHead' : 'snakeBody';\n    });\n  }\n\n  private getNextHeadPoint(): Point {\n    const currentX = this.snake[0].x;\n    const maxX = this.field.length - 1;\n\n    const currentY = this.snake[0].y;\n    const maxY = this.field[0].length - 1;\n\n    if (this.direction === 'up') {\n      const y = currentY - 1;\n      const newY = y < 0 ? maxY : y;\n      return { x: currentX, y: newY };\n    }\n    if (this.direction === 'right') {\n      const x = currentX + 1;\n      const newX = x > maxX ? 0 : x;\n      return { x: newX, y: currentY };\n    }\n    if (this.direction === 'down') {\n      const y = currentY + 1;\n      const newY = y > maxY ? 0 : y;\n      return { x: currentX, y: newY };\n    }\n    //   if (direction === 'left') {\n    const x = currentX - 1;\n    const newX = x < 0 ? maxX : x;\n    return { x: newX, y: currentY };\n  }\n\n  public getField(): Field {\n    return this.field;\n  }\n\n  public getScore(): number {\n    return this.score;\n  }\n\n  public updateField(): boolean {\n    const newHead = this.getNextHeadPoint();\n\n    if (this.field[newHead.x][newHead.y] === 'snakeBody') {\n      return false;\n    }\n\n    this.snake.unshift(newHead);\n\n    if (newHead.x === this.food.x && newHead.y === this.food.y) {\n      this.score += 1;\n      this.generateFood();\n      this.setFoodIntoField();\n    } else {\n      const prevSnakeEnd = this.snake.pop();\n      this.field[prevSnakeEnd.x][prevSnakeEnd.y] = 'empty';\n    }\n\n    this.setSnakeIntoField();\n\n    return true;\n  }\n}\n\nexport default GameData;\n","import { CellType } from '../types';\n\nexport const cellSize = 20;\n\nexport const cellColorDict: Record<CellType, string> = {\n  empty: '#333',\n  food: '#fc0',\n  snakeHead: '#fff',\n  snakeBody: '#bbb',\n};\n","import { cellSize, cellColorDict } from '../lib/constants';\nimport { Field, CellType } from '../types';\n\nclass GameView {\n  private ctx: CanvasRenderingContext2D;\n\n  private scaleIndex: number;\n\n  constructor(ctx: CanvasRenderingContext2D, scaleIndex: number) {\n    this.ctx = ctx;\n    this.scaleIndex = scaleIndex;\n\n    this.scaleCanvas();\n  }\n\n  public drawField(field: Field): void {\n    const xAmount = field.length;\n    const yAmount = field[0].length;\n\n    for (let x = 0; x < xAmount; x++) {\n      for (let y = 0; y < yAmount; y++) {\n        this.drawCell(x, y, field[x][y]);\n      }\n    }\n  }\n\n  private drawCell(x: number, y: number, pointType: CellType): void {\n    this.ctx.fillStyle = cellColorDict[pointType];\n    this.ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n  }\n\n  private scaleCanvas(): void {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.scale(this.scaleIndex, this.scaleIndex);\n  }\n\n  public updateScaleIndex(scaleIndex: number): void {\n    this.scaleIndex = scaleIndex;\n    this.scaleCanvas();\n  }\n}\n\nexport default GameView;\n","import { Direction, GameStatus } from '../types';\nimport Queue from '../lib/queue';\nimport GameData from './data';\nimport GameView from './view';\n\ntype Callbacks = {\n  onScoreChange: (score: number) => void;\n  onStatusChange: (status: GameStatus) => void;\n};\n\nclass GameController {\n  private data: GameData;\n\n  private view: GameView;\n\n  private status: GameStatus;\n\n  private directionsToApply: Queue<Direction>;\n\n  private callbacks: Callbacks;\n\n  private intervalId: ReturnType<typeof setInterval>;\n\n  constructor(\n    ctx: CanvasRenderingContext2D,\n    scaleIndex: number,\n    columnsAmount: number,\n    rowsAmount: number,\n    callbacks: Callbacks\n  ) {\n    this.data = new GameData(columnsAmount, rowsAmount);\n    this.view = new GameView(ctx, scaleIndex);\n    this.directionsToApply = new Queue();\n    this.callbacks = callbacks;\n    this.setStatus('unstarted');\n  }\n\n  public init(): void {\n    this.view.drawField(this.data.getField());\n  }\n\n  public start(): void {\n    this.setStatus('active');\n    this.go();\n  }\n\n  private setStatus(status: GameStatus): void {\n    this.status = status;\n    this.callbacks.onStatusChange(status);\n  }\n\n  private go(): void {\n    let score = this.data.getScore();\n\n    this.intervalId = setInterval(() => {\n      const shouldContinue = this.data.updateField();\n\n      if (!shouldContinue) {\n        this.gameOver();\n        return;\n      }\n\n      const currentScore = this.data.getScore();\n      if (currentScore > score) {\n        score = currentScore;\n        this.callbacks.onScoreChange(score);\n        this.increaseSpeed();\n      }\n\n      if (!this.directionsToApply.isEmpty()) {\n        const direction = this.directionsToApply.dequeue();\n        this.data.updateDirection(direction);\n      }\n\n      this.view.drawField(this.data.getField());\n    }, this.getSpeed());\n  }\n\n  private increaseSpeed(): void {\n    clearInterval(this.intervalId);\n    this.go();\n  }\n\n  private getSpeed(): number {\n    return Math.max(50, 3000 / (this.data.getScore() + 10));\n  }\n\n  private gameOver(): void {\n    this.setStatus('game over');\n    clearInterval(this.intervalId);\n  }\n\n  public pause(): void {\n    this.setStatus('pause');\n    clearInterval(this.intervalId);\n  }\n\n  public continue(): void {\n    this.start();\n  }\n\n  public reset(): void {\n    clearInterval(this.intervalId);\n  }\n\n  public updateDirection(direction: Direction): void {\n    if (this.directionsToApply.last !== direction) {\n      this.directionsToApply.enqueue(direction);\n    }\n  }\n\n  public getStatus(): GameStatus {\n    return this.status;\n  }\n\n  public fixScaleIndexChange(scaleIndex: number): void {\n    this.view.updateScaleIndex(scaleIndex);\n    this.view.drawField(this.data.getField());\n  }\n}\n\nexport default GameController;\n","import React, { FC, useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport GameContainer from './GameContainer';\nimport Hint from './Hint';\nimport Status from './Status';\nimport ScoreBoard from './ScoreBoard';\nimport Screen from './Screen';\nimport Controls from './Controls';\nimport Game from '../game/controller';\nimport { cellSize } from '../lib/constants';\nimport { GameStatus, Direction } from '../types';\n\nconst pixelRatioMediaQuery =\n  '(-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2/1), (min-resolution: 2dppx)';\n\nconst keyCodeToDirectionMap: Record<number, Direction> = {\n  38: 'up',\n  39: 'right',\n  40: 'down',\n  37: 'left',\n};\n\nconst arrowsKeyCodes = Object.keys(keyCodeToDirectionMap).map((key) =>\n  Number(key)\n);\n\nconst enterKeyCode = 13;\n\nconst spaceKeyCode = 32;\n\nconst gameStatusContorls = [enterKeyCode, spaceKeyCode];\n\nconst canvasSize = {\n  width: 660,\n  height: 440,\n};\n\nconst SnakeGame: FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameRef = useRef<Game>(null);\n  const [scaleIndex, setScaleIndex] = useState(window.devicePixelRatio);\n  const [score, setScore] = useState(0);\n  const [record, setRecord] = useState(\n    Number(window.localStorage.getItem('record'))\n  );\n  const [status, setStatus] = useState<GameStatus>('unstarted');\n\n  const generateNewGame = (): void => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const ctx = canvas.getContext('2d');\n\n    if (gameRef.current && gameRef.current.getStatus() !== 'unstarted') {\n      gameRef.current.reset();\n    }\n\n    const game = new Game(\n      ctx,\n      scaleIndex,\n      canvasSize.width / cellSize,\n      canvasSize.height / cellSize,\n      { onScoreChange: setScore, onStatusChange: setStatus }\n    );\n    game.init();\n    gameRef.current = game;\n    setScore(0);\n    setStatus('unstarted');\n  };\n\n  const pauseGame = (): void => {\n    gameRef.current.pause();\n  };\n\n  const continueGame = (): void => {\n    gameRef.current.continue();\n  };\n\n  useLayoutEffect(() => {\n    const mediaQueryList = window.matchMedia(pixelRatioMediaQuery);\n    const updateScaleIndex = (): void => {\n      setScaleIndex(window.devicePixelRatio);\n    };\n\n    // Safari does not support addEventListener and removeEventListener at MediaQueryList,\n    // is has addListener removeListener method instead\n    if (mediaQueryList.addEventListener && mediaQueryList.removeEventListener) {\n      mediaQueryList.addEventListener('change', updateScaleIndex);\n\n      return () => {\n        mediaQueryList.removeEventListener('change', updateScaleIndex);\n      };\n      // eslint-disable-next-line no-else-return\n    } else {\n      mediaQueryList.addListener(updateScaleIndex);\n\n      return () => {\n        mediaQueryList.removeListener(updateScaleIndex);\n      };\n    }\n  }, []);\n\n  useEffect(() => {\n    gameRef.current.fixScaleIndexChange(scaleIndex);\n  }, [scaleIndex]);\n\n  useLayoutEffect(() => {\n    generateNewGame();\n  }, []);\n\n  useEffect(() => {\n    if (score > record) {\n      setRecord(score);\n      window.localStorage.setItem('record', score.toString());\n    }\n  }, [score, record]);\n\n  useEffect(() => {\n    const callback = (e: KeyboardEvent): void => {\n      const { keyCode } = e;\n      const game = gameRef.current;\n      const gameStatus = game.getStatus();\n\n      if (arrowsKeyCodes.includes(keyCode)) {\n        e.preventDefault();\n\n        if (gameStatus === 'unstarted') {\n          game.start();\n        }\n\n        if (gameStatus === 'pause') {\n          continueGame();\n        }\n\n        game.updateDirection(keyCodeToDirectionMap[keyCode]);\n      }\n\n      if (gameStatusContorls.includes(keyCode) && e.target === document.body) {\n        e.preventDefault();\n\n        if (gameStatus === 'unstarted') {\n          game.start();\n        }\n\n        if (gameStatus === 'active') {\n          pauseGame();\n        }\n\n        if (gameStatus === 'pause') {\n          continueGame();\n        }\n\n        if (gameStatus === 'game over') {\n          generateNewGame();\n        }\n      }\n    };\n\n    window.addEventListener('keydown', callback);\n\n    return () => {\n      window.removeEventListener('keydown', callback);\n    };\n  }, []);\n\n  return (\n    <GameContainer>\n      <Hint />\n      <div className=\"info-row\">\n        <Status status={status} />\n        <ScoreBoard record={record} score={score} />\n      </div>\n      <Screen\n        ref={canvasRef}\n        scaleIndex={scaleIndex}\n        width={canvasSize.width}\n        height={canvasSize.height}\n      />\n      <Controls\n        status={status}\n        generateNewGame={generateNewGame}\n        pauseGame={pauseGame}\n        continueGame={continueGame}\n      />\n    </GameContainer>\n  );\n};\n\nexport default SnakeGame;\n","import React, { FC } from 'react';\nimport Header from './Header';\nimport SnakeGame from './SnakeGame';\n\nconst App: FC = () => {\n  return (\n    <div className=\"content-wrapper\">\n      <Header />\n      <SnakeGame />\n    </div>\n  );\n};\n\nexport default App;\n","import React, { FC } from 'react';\nimport App from './App';\n\nconst Root: FC = () => {\n  return <App />;\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'nes.css/css/nes.min.css';\nimport './index.css';\nimport Root from './components/Root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}