{"version":3,"sources":["components/Header.tsx","components/GameContainer.tsx","components/Hint.tsx","components/Status.tsx","components/ScoreBoardItem.tsx","components/ScoreBoard.tsx","components/Screen.tsx","components/Controls.tsx","get-random-int-inclusive.ts","game/data.ts","constants.ts","game/view.ts","game/controller.ts","components/SnakeGame.tsx","components/App.tsx","components/Root.tsx","index.tsx"],"names":["Header","className","Container","children","Hint","Status","status","ScoreBoardItem","icon","value","ScoreBoard","record","score","Screen","forwardRef","_","ref","style","marginBottom","width","height","margin","Controls","generateNewGame","pauseGame","continueGame","type","onClick","getRandomIntInclusive","a","b","min","Math","ceil","max","floor","random","GameData","columnsAmount","rowsAmount","field","food","snake","direction","this","generateField","generateFood","setFoodIntoField","generateSnakeCoord","setSnakeIntoField","xNumber","yNumber","x","y","emptyRects","length","push","getRandomEmptyPoint","head","forEach","idx","currentX","maxX","currentY","maxY","newHead","getNextHeadPoint","unshift","prevSnakeEnd","pop","cellSize","cellColorDict","empty","snakeHead","snakeBody","GameView","ctx","scaleIndex","scaleCanvas","xAmount","yAmount","drawCell","pointType","fillStyle","fillRect","setTransform","scale","GameController","callbacks","data","view","intervalId","setStatus","drawField","getField","go","onStatusChange","getScore","setInterval","updateField","currentScore","onScoreChange","increaseSpeed","gameOver","getSpeed","clearInterval","start","updateDirection","keyCodeToDirectionMap","arrowsKeyCodes","Object","keys","map","key","Number","SnakeGame","canvasRef","useRef","gameRef","useState","window","devicePixelRatio","setScaleIndex","setScore","localStorage","getItem","setRecord","canvas","current","getContext","getStatus","reset","game","Game","init","useLayoutEffect","mediaQueryList","matchMedia","updateScaleIndex","addEventListener","removeEventListener","addListener","removeListener","useEffect","setItem","toString","callback","e","keyCode","includes","preventDefault","GameContainer","pause","continue","App","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54151835.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nconst Header: FC = () => {\n  return (\n    <section className=\"topic\">\n      <h1>Snake Game</h1>\n      <p>Cool retro video game from our childhood</p>\n    </section>\n  );\n};\n\nexport default Header;\n","import React, { FC } from 'react';\n\nconst Container: FC = ({ children }) => {\n  return (\n    <section className=\"nes-container with-title\">\n      <h3 className=\"title\">Let&apos;s play</h3>\n      {children}\n    </section>\n  );\n};\n\nexport default Container;\n","import React, { FC } from 'react';\n\nconst Hint: FC = () => {\n  return <p>Use keyboard arrows to play</p>;\n};\n\nexport default Hint;\n","import React, { FC } from 'react';\nimport { GameStatus } from '../types';\n\ntype StatusProps = {\n  status: GameStatus;\n};\n\nconst Status: FC<StatusProps> = ({ status }) => {\n  return (\n    <div>\n      {status === 'unstarted' && (\n        <span className=\"nes-badge\">\n          <span className=\"is-dark\">Waiting</span>\n        </span>\n      )}\n      {status === 'active' && (\n        <span className=\"nes-badge\">\n          <span className=\"is-primary\">Active</span>\n        </span>\n      )}\n      {status === 'pause' && (\n        <span className=\"nes-badge\">\n          <span className=\"is-warning\">Pause</span>\n        </span>\n      )}\n      {status === 'game over' && (\n        <span className=\"nes-badge\">\n          <span className=\"is-error\">Game Over</span>\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default Status;\n","import React, { FC } from 'react';\n\ntype ScoreBoardItemProps = {\n  icon: string;\n  value: number;\n};\n\nconst ScoreBoardItem: FC<ScoreBoardItemProps> = ({ icon, value }) => {\n  return (\n    <span className=\"scoreboard-item\">\n      <i className={`nes-icon ${icon} is-medium`} />\n      <span className=\"scoreboard-item__value\">{value}</span>\n    </span>\n  );\n};\n\nexport default ScoreBoardItem;\n","import React, { FC } from 'react';\nimport ScoreBoardItem from './ScoreBoardItem';\n\ntype ScoreBoardProps = {\n  record: number;\n  score: number;\n};\n\nconst ScoreBoard: FC<ScoreBoardProps> = ({ record, score }) => {\n  return (\n    <div className=\"scoreboard\">\n      <ScoreBoardItem icon=\"trophy\" value={record} />\n      <ScoreBoardItem icon=\"coin\" value={score} />\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React, { forwardRef } from 'react';\n\nconst Screen = forwardRef<HTMLCanvasElement>((_, ref) => {\n  return (\n    <div className=\"nes-container is-rounded\" style={{ marginBottom: '20px' }}>\n      <canvas ref={ref} width=\"660\" height=\"440\" style={{ margin: '0 auto' }} />\n    </div>\n  );\n});\n\nexport default Screen;\n","import React, { FC } from 'react';\nimport { GameStatus } from '../types';\n\ntype ControlsProps = {\n  status: GameStatus;\n  generateNewGame: () => void;\n  pauseGame: () => void;\n  continueGame: () => void;\n};\n\nconst Controls: FC<ControlsProps> = ({\n  status,\n  generateNewGame,\n  pauseGame,\n  continueGame,\n}) => {\n  return (\n    <div className=\"controls-row\">\n      <button type=\"button\" className=\"nes-btn\" onClick={generateNewGame}>\n        Play new game\n      </button>\n      {status === 'active' && (\n        <button\n          type=\"button\"\n          className=\"nes-btn is-warning\"\n          onClick={pauseGame}\n        >\n          Pause\n        </button>\n      )}\n      {status === 'pause' && (\n        <button\n          type=\"button\"\n          className=\"nes-btn is-primary\"\n          onClick={continueGame}\n        >\n          Continue\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","const getRandomIntInclusive = (a: number, b: number): number => {\n  const min = Math.ceil(a);\n  const max = Math.floor(b);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport default getRandomIntInclusive;\n","import getRandomIntInclusive from '../get-random-int-inclusive';\nimport { Field, Point, Food, Snake, Direction } from '../types';\n\nclass GameData {\n  private field: Field;\n\n  private food: Food;\n\n  private snake: Snake;\n\n  private direction: Direction;\n\n  private score: number;\n\n  constructor(columnsAmount: number, rowsAmount: number) {\n    this.score = 0;\n    this.direction = 'up';\n\n    this.generateField(columnsAmount, rowsAmount);\n\n    this.generateFood();\n    this.setFoodIntoField();\n\n    this.generateSnakeCoord();\n    this.setSnakeIntoField();\n  }\n\n  private generateField(xNumber: number, yNumber: number): void {\n    this.field = [];\n    for (let x = 0; x < xNumber; x++) {\n      for (let y = 0; y < yNumber; y++) {\n        if (!this.field[x]) {\n          this.field[x] = [];\n        }\n        this.field[x][y] = 'empty';\n      }\n    }\n  }\n\n  public updateDirection(direction: Direction): void {\n    if (direction === 'up' && this.direction !== 'down') {\n      this.direction = 'up';\n      return;\n    }\n\n    if (direction === 'right' && this.direction !== 'left') {\n      this.direction = 'right';\n      return;\n    }\n\n    if (direction === 'down' && this.direction !== 'up') {\n      this.direction = 'down';\n      return;\n    }\n\n    if (direction === 'left' && this.direction !== 'right') {\n      this.direction = 'left';\n    }\n  }\n\n  private getRandomEmptyPoint(): Point {\n    const emptyRects = [];\n    for (let x = 0; x < this.field.length; x++) {\n      for (let y = 0; y < this.field[0].length; y++) {\n        if (this.field[x][y] === 'empty') {\n          emptyRects.push({ x, y });\n        }\n      }\n    }\n    return emptyRects[getRandomIntInclusive(0, emptyRects.length - 1)];\n  }\n\n  private generateFood(): void {\n    this.food = this.getRandomEmptyPoint();\n  }\n\n  private generateSnakeCoord(): void {\n    const head = this.getRandomEmptyPoint();\n    this.snake = [head, { ...head, y: head.y + 1 }, { ...head, y: head.y + 2 }];\n  }\n\n  private setFoodIntoField(): void {\n    this.field[this.food.x][this.food.y] = 'food';\n  }\n\n  private setSnakeIntoField(): void {\n    this.snake.forEach(({ x, y }, idx) => {\n      this.field[x][y] = idx === 0 ? 'snakeHead' : 'snakeBody';\n    });\n  }\n\n  private getNextHeadPoint(): Point {\n    const currentX = this.snake[0].x;\n    const maxX = this.field.length - 1;\n\n    const currentY = this.snake[0].y;\n    const maxY = this.field[0].length - 1;\n\n    if (this.direction === 'up') {\n      const y = currentY - 1;\n      const newY = y < 0 ? maxY : y;\n      return { x: currentX, y: newY };\n    }\n    if (this.direction === 'right') {\n      const x = currentX + 1;\n      const newX = x > maxX ? 0 : x;\n      return { x: newX, y: currentY };\n    }\n    if (this.direction === 'down') {\n      const y = currentY + 1;\n      const newY = y > maxY ? 0 : y;\n      return { x: currentX, y: newY };\n    }\n    //   if (direction === 'left') {\n    const x = currentX - 1;\n    const newX = x < 0 ? maxX : x;\n    return { x: newX, y: currentY };\n  }\n\n  public getField(): Field {\n    return this.field;\n  }\n\n  public getScore(): number {\n    return this.score;\n  }\n\n  public updateField(): boolean {\n    const newHead = this.getNextHeadPoint();\n\n    if (this.field[newHead.x][newHead.y] === 'snakeBody') {\n      return false;\n    }\n\n    this.snake.unshift(newHead);\n\n    if (newHead.x === this.food.x && newHead.y === this.food.y) {\n      this.score += 1;\n      this.generateFood();\n      this.setFoodIntoField();\n    } else {\n      const prevSnakeEnd = this.snake.pop();\n      this.field[prevSnakeEnd.x][prevSnakeEnd.y] = 'empty';\n    }\n\n    this.setSnakeIntoField();\n\n    return true;\n  }\n}\n\nexport default GameData;\n","import { CellType } from './types';\n\nexport const cellSize = 10;\n\nexport const cellColorDict: Record<CellType, string> = {\n  empty: '#333',\n  food: '#fc0',\n  snakeHead: '#fff',\n  snakeBody: '#bbb',\n};\n","import { cellSize, cellColorDict } from '../constants';\nimport { Field, CellType } from '../types';\n\nclass GameView {\n  private ctx: CanvasRenderingContext2D;\n\n  private scaleIndex: number;\n\n  constructor(ctx: CanvasRenderingContext2D, scaleIndex: number) {\n    this.ctx = ctx;\n    this.scaleIndex = scaleIndex;\n\n    this.scaleCanvas();\n  }\n\n  public drawField(field: Field): void {\n    const xAmount = field.length;\n    const yAmount = field[0].length;\n\n    for (let x = 0; x < xAmount; x++) {\n      for (let y = 0; y < yAmount; y++) {\n        this.drawCell(x, y, field[x][y]);\n      }\n    }\n  }\n\n  private drawCell(x: number, y: number, pointType: CellType): void {\n    this.ctx.fillStyle = cellColorDict[pointType];\n    this.ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n  }\n\n  private scaleCanvas(): void {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.scale(this.scaleIndex, this.scaleIndex);\n  }\n}\n\nexport default GameView;\n","import { Direction, GameStatus } from '../types';\nimport GameData from './data';\nimport GameView from './view';\n\ntype Callbacks = {\n  onScoreChange: (score: number) => void;\n  onStatusChange: (status: GameStatus) => void;\n};\n\nclass GameController {\n  private data: GameData;\n\n  private view: GameView;\n\n  private status: GameStatus;\n\n  private intervalId: ReturnType<typeof setInterval>;\n\n  private callbacks: Callbacks;\n\n  constructor(\n    ctx: CanvasRenderingContext2D,\n    scaleIndex: number,\n    columnsAmount: number,\n    rowsAmount: number,\n    callbacks: Callbacks\n  ) {\n    this.data = new GameData(columnsAmount, rowsAmount);\n    this.view = new GameView(ctx, scaleIndex);\n    this.callbacks = callbacks;\n    this.setStatus('unstarted');\n  }\n\n  public init(): void {\n    this.view.drawField(this.data.getField());\n  }\n\n  public start(): void {\n    this.setStatus('active');\n    this.go();\n  }\n\n  private setStatus(status: GameStatus): void {\n    this.status = status;\n    this.callbacks.onStatusChange(status);\n  }\n\n  private go(): void {\n    let score = this.data.getScore();\n\n    this.intervalId = setInterval(() => {\n      const shouldContinue = this.data.updateField();\n\n      if (!shouldContinue) {\n        this.gameOver();\n        return;\n      }\n\n      const currentScore = this.data.getScore();\n      if (currentScore > score) {\n        score = currentScore;\n        this.callbacks.onScoreChange(score);\n        this.increaseSpeed();\n      }\n      this.view.drawField(this.data.getField());\n    }, this.getSpeed());\n  }\n\n  private increaseSpeed(): void {\n    clearInterval(this.intervalId);\n    this.go();\n  }\n\n  private getSpeed(): number {\n    return Math.max(50, 3000 / (this.data.getScore() + 10));\n  }\n\n  private gameOver(): void {\n    this.setStatus('game over');\n    clearInterval(this.intervalId);\n  }\n\n  public pause(): void {\n    this.setStatus('pause');\n    clearInterval(this.intervalId);\n  }\n\n  public continue(): void {\n    this.start();\n  }\n\n  public reset(): void {\n    clearInterval(this.intervalId);\n  }\n\n  public updateDirection(direction: Direction): void {\n    this.data.updateDirection(direction);\n  }\n\n  public getStatus(): GameStatus {\n    return this.status;\n  }\n}\n\nexport default GameController;\n","import React, { FC, useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport GameContainer from './GameContainer';\nimport Hint from './Hint';\nimport Status from './Status';\nimport ScoreBoard from './ScoreBoard';\nimport Screen from './Screen';\nimport Controls from './Controls';\nimport Game from '../game/controller';\nimport { cellSize } from '../constants';\nimport { GameStatus, Direction } from '../types';\n\nconst pixelRatioMediaQuery =\n  '(-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2/1), (min-resolution: 2dppx)';\n\nconst keyCodeToDirectionMap: Record<number, Direction> = {\n  38: 'up',\n  39: 'right',\n  40: 'down',\n  37: 'left',\n};\n\nconst arrowsKeyCodes = Object.keys(keyCodeToDirectionMap).map((key) =>\n  Number(key)\n);\n\nconst SnakeGame: FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameRef = useRef<Game>(null);\n  const [scaleIndex, setScaleIndex] = useState(window.devicePixelRatio);\n  const [score, setScore] = useState(0);\n  const [record, setRecord] = useState(\n    Number(window.localStorage.getItem('record'))\n  );\n  const [status, setStatus] = useState<GameStatus>('unstarted');\n\n  const generateNewGame = (): void => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const ctx = canvas.getContext('2d');\n\n    if (gameRef.current && gameRef.current.getStatus() !== 'unstarted') {\n      gameRef.current.reset();\n    }\n\n    const game = new Game(\n      ctx,\n      scaleIndex,\n      canvas.width / cellSize / scaleIndex,\n      canvas.height / cellSize / scaleIndex,\n      { onScoreChange: setScore, onStatusChange: setStatus }\n    );\n    game.init();\n    gameRef.current = game;\n    setScore(0);\n    setStatus('unstarted');\n  };\n\n  const pauseGame = (): void => {\n    gameRef.current.pause();\n  };\n\n  const continueGame = (): void => {\n    gameRef.current.continue();\n  };\n\n  useLayoutEffect(() => {\n    const mediaQueryList = window.matchMedia(pixelRatioMediaQuery);\n    const updateScaleIndex = (): void => {\n      setScaleIndex(window.devicePixelRatio);\n      generateNewGame();\n    };\n\n    // Safari does not support addEventListener and removeEventListener at MediaQueryList,\n    // is has addListener removeListener method instead\n    if (mediaQueryList.addEventListener && mediaQueryList.removeEventListener) {\n      mediaQueryList.addEventListener('change', updateScaleIndex);\n\n      return () => {\n        mediaQueryList.removeEventListener('change', updateScaleIndex);\n      };\n      // eslint-disable-next-line no-else-return\n    } else {\n      mediaQueryList.addListener(updateScaleIndex);\n\n      return () => {\n        mediaQueryList.removeListener(updateScaleIndex);\n      };\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    generateNewGame();\n  }, []);\n\n  useEffect(() => {\n    if (score > record) {\n      setRecord(score);\n      window.localStorage.setItem('record', score.toString());\n    }\n  }, [score, record]);\n\n  useEffect(() => {\n    const callback = (e: KeyboardEvent): void => {\n      const { keyCode } = e;\n      if (arrowsKeyCodes.includes(keyCode)) {\n        e.preventDefault();\n        const game = gameRef.current;\n        if (game.getStatus() === 'unstarted') {\n          game.start();\n        }\n        game.updateDirection(keyCodeToDirectionMap[keyCode]);\n      }\n    };\n    window.addEventListener('keydown', callback);\n\n    return () => {\n      window.removeEventListener('keydown', callback);\n    };\n  }, []);\n\n  return (\n    <GameContainer>\n      <Hint />\n      <div className=\"info-row\">\n        <Status status={status} />\n        <ScoreBoard record={record} score={score} />\n      </div>\n      <Screen ref={canvasRef} />\n      <Controls\n        status={status}\n        generateNewGame={generateNewGame}\n        pauseGame={pauseGame}\n        continueGame={continueGame}\n      />\n    </GameContainer>\n  );\n};\n\nexport default SnakeGame;\n","import React, { FC } from 'react';\nimport Header from './Header';\nimport SnakeGame from './SnakeGame';\n\nconst App: FC = () => {\n  return (\n    <div className=\"content-wrapper\">\n      <Header />\n      <SnakeGame />\n    </div>\n  );\n};\n\nexport default App;\n","import React, { FC } from 'react';\nimport App from './App';\n\nconst Root: FC = () => {\n  return <App />;\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'nes.css/css/nes.min.css';\nimport './index.css';\nimport Root from './components/Root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}